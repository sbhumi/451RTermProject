ALTER TABLE CLASSES
ADD CLASS_NAME VARCHAR;
GO

CREATE PROCEDURE filterJobRequirements
	@JOBID INT
AS
	SET NOCOUNT ON;
	SELECT CLASSID, GRADE
	FROM JOB_REQUIREMENTS
	WHERE JOBID = @JOBID;
GO

CREATE PROCEDURE filterJob
	@CLASSID int
AS
	SET NOCOUNT ON;
	SELECT JOB_TITLE, TEACHER, JOB_STATUS
	FROM JOB
	WHERE CLASSID = @CLASSID;
GO

CREATE PROCEDURE filterApplicationsbyJob
	@JOBID INT
AS
	SET NOCOUNT ON;
	SELECT JOBID, STUDENTID
	FROM APPLICATIONS
	WHERE JOBID = @JOBID;
GO

CREATE PROCEDURE filterApplicationsbyClass
	@CLASSID INT
AS
	SET NOCOUNT ON;
	SELECT JOBID, STUDENTID
	FROM APPLICATIONS
	WHERE JOBID IN (
	SELECT JOB_ID
	FROM JOB
	WHERE CLASSID = @CLASSID);
GO

ALTER TABLE CLASSES
DROP COLUMN SECTION, [CLASSES.TERM];
GO

CREATE TABLE CLASS_TERMS (
CLASSID INT NOT NULL,
TERM DATE NOT NULL,
SECTION INT,
CONSTRAINT PKCLASS_TERMS PRIMARY KEY(CLASSID, TERM),
CONSTRAINT CLASS_TERMSFKCLASS FOREIGN KEY(CLASSID) REFERENCES CLASSES(CLASSID)
ON DELETE CASCADE
);
GO

ALTER TABLE CLASSES_TAKEN
ADD TERM DATE NOT NULL;
GO

DROP TABLE DOCUMENTS;
GO




CREATE PROCEDURE filterApplicantsByJob
	@JOBID INT
AS
	SET NOCOUNT ON;
	SELECT  STUDENT.FIRST_NAME, STUDENT.LAST_NAME, CLASSES_TAKEN.GRADE
	FROM APPLICATIONS 
	INNER JOIN STUDENT
	ON APPLICATIONS.STUDENTID = STUDENT.STUDENTID
	INNER JOIN JOB 
	ON APPLICATIONS.JOBID = JOB.JOB_ID
	INNER JOIN CLASSES_TAKEN
	ON APPLICATIONS.STUDENTID = CLASSES_TAKEN.STUDENTID
	WHERE APPLICATIONS.JOBID = @JOBID;
GO

CREATE TRIGGER noApplyUnlessAllRequirementMet
ON APPLICATIONS AFTER INSERT
AS
IF (0 != (SELECT COUNT(CLASSES_TAKEN.GRADE) FROM 
JOB_REQUIREMENTS
LEFT JOIN CLASSES_TAKEN
ON JOB_REQUIREMENTS.CLASSID = CLASSES_TAKEN.STUDENTID
join inserted
ON inserted.JOBID = JOB_REQUIREMENTS.JOBID
WHERE CLASSES_TAKEN.GRADE IS NULL))
BEGIN
	RAISERROR('Requirements not met',1,1);
	ROLLBACK
END
GO
--THIS TRIGGER MAY NOT WORK AND MAY NEED TO BE 
-- IMPLEMENTED IN THE BUISNESS SIDE




